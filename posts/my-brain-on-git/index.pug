extends ../../base

block content
  article: :markdown-it(html=true)
    # [My Brain on Git](.)

    I've been using Git for three years, but only recently I've started to use it
    properly. I've read almost all of [Pro Git][pro-git] so it's high time I use the
    more advanced features.

    Today I think I'm going to make my first rebase: splitting a commit. (Squashing
    doesn't count, that's easy.)

    The project I'm using as a guinea pig is my Software Quality lab exercises. It's
    a C# solution with multiple projects.

    The following is the history. Last week I started the official [NUnit Quick
    Start][nunitqs] (until end of `master`). I did not finish it and started a
    branch with the homework (`hw1`). I did not finish that and started a branch
    with the second lab work (`lab4`). I did not finish that and started a branch
    with the second homework (`ls`). My history looks like this:

    <div class='image'><img src='git-initial.png' alt='initial git history' class='image-center'></div>

    Admitedly, I didn't branch correctly. But with Git I can fix anything. Right?
    But I'll just backup the whole project before I start being a victor and rewrite
    my history.

    I have multiple problems to fix. The first one would be that I started my
    project as an executable instead of library.

        -    <OutputType>Exe</OutputType>
        +    <OutputType>Library</OutputType>

    So I want to move that hunk in my initial commit.

        $ git rebase -i master~3

    The commits are displayed in the first to last order in this here editor. I want
    to edit "Add initial bank class.". Write and quit.

    Wait a second. I want to move things into the initial commit. I probably should
    have done `rebase -i master~4`.

        $ git rebase --abandon
        error: unknown option `abandon'

    Ah, yes. It's `--abort`.

        $ git rebase --abort

    So I should include the initial one in the rebase.

        $ git rebase -i master~4
        fatal: Needed a single revision
        invalid upstream master~4

    What?... I'll search the web.

    Oh, so I have to include `--root` to edit that. I think I first to need master
    the plain `rebase -i`. I didn't care much for that change move anyway.

    So I want to edit "Add NUnit reference.". Here it is:

        diff --git a/Libraries/nunit.framework.dll b/Libraries/nunit.framework.dll
        new file mode 100644
        index 0000000..780727f
        Binary files /dev/null and b/Libraries/nunit.framework.dll differ
        diff --git a/NUnitQuickStart/NUnitQuickStart.csproj b/NUnitQuickStart/NUnitQuickStart.csproj
        index e336bd6..4ca749f 100644
        --- a/NUnitQuickStart/NUnitQuickStart.csproj
        +++ b/NUnitQuickStart/NUnitQuickStart.csproj
        @@ -37,6 +37,9 @@
             <StartupObject />
           </PropertyGroup>
           <ItemGroup>
        +    <Reference Include="nunit.framework">
        +      <HintPath>..\Libraries\nunit.framework.dll</HintPath>
        +    </Reference>
             <Reference Include="System" />
             <Reference Include="System.Core" />
             <Reference Include="System.Xml.Linq" />
        @@ -46,7 +49,7 @@
             <Reference Include="System.Xml" />
           </ItemGroup>
           <ItemGroup>
        -    <Compile Include="Program.cs" />
        +    <Compile Include="Bank.cs" />
           </ItemGroup>
           <ItemGroup>
             <Folder Include="Properties\" />

    I should split adding the DLL in its own commit. A reason I can make up is that
    the DLL isn't unique to this project. It's shared between projects of the
    solution.

        $ git rebase -i master~3
        $ git reset HEAD^
        $ git add Libraries/*
        $ gac Add NUnit DLL.

    Damn my reflexes! `gac` is a bash function of mine for staging everything and
    making a commit without having to quote the commit message. Now I've committed
    everything!

    I'll reset the head again.

        $ git reset HEAD^
        $ git add Libraries/*
        $ git commit --amend -m 'Add NUnit DLL.'

    Wait, no. I should have... I'll do it again.

        $ git rebase --abort

    Okay again:

        $ git rebase -i master~3
        $ git reset HEAD^
        $ git add Libraries/*
        $ git commit -m 'Add NUnit DLL.'
        $ git add .
        $ git commit -m 'Add NUnit reference.'
        $ git rebase --continue

    Awesome! My first true rebase. I'll review my commit.

    Oh yeah, I forgot to save all files in Visual Studio when I commited and now the
    following change is in "Add NUnit reference." instead of "Add initial Bank
    class.".

        -    <Compile Include="Program.cs" />
        +    <Compile Include="Bank.cs" />

    Now I have to squash all three commits and split them in the right order! No,
    wait, that's stupid. I'll split the change away, then reorder it, and then
    squash it. Actually I think I can reorder and squash at the same time.

    So I'll split it first.

        $ git rebase -i master~4
        $ git reset HEAD^
        $ git add -p .

    Yes! my first `add -p`. I should use that more often.

        $ git commit -m 'Add NUnit reference.'

    Commit the change. The message doesn't matter because I'll squash it later.

        $ git add .
        $ git commit -m 'MMM'
        $ git rebase --continue

    Now to reorder and squash.

        $ git rebase -i master~4

    Done!

    I'm getting cocky now and I have an idea. I don't have to include the initial
    commit in the rebase to make this change:

        -    <OutputType>Exe</OutputType>
        +    <OutputType>Library</OutputType>

    I can amend it while I'm editing the second commit.

        $ git rebase -i master~4
        $ git reset HEAD^
        $ git add NUnitQuickStart/NUnitQuickStart.csproj
        $ git commit --amend -m 'Initial commit.'

    I'll review the history:

    <div class='image'><img src='git-final.png' alt='final git history' class='image-center'></div>

    Fuck! My history tree is now a forest.

    So that's why I shouldn't have changed the initial commit. I think I can cherry
    pick those commits into the new tree though. I haven't done that before either.
    I'll get better at this with time. Git *is* fun.

    <div class='star-separator'></div>

    <small>This story was reconstructed from my Bash history. There might be a few
    discrepancies.</small>

    [pro-git]: http://www.amazon.com/gp/product/1430218339
    [nunitqs]: http://www.nunit.org/index.php?p=quickStart&r=2.2.10

    Date: 2014-03-20
